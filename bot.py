import os
from dotenv import load_dotenv
import time
import sqlite3
from atprototools import Session
from easydict import EasyDict
import gpt
from datetime import datetime, timedelta, timezone
import pytz
from dateutil.parser import parse
import random
import util
import json
import requests
import re
import cairosvg


connection_atp = sqlite3.connect("atp.db")
cur = connection_atp.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS users
  (id INTEGER PRIMARY KEY AUTOINCREMENT,
   did TEXT UNIQUE,
   handle TEXT,
   endpoint TEXT,
   created_at DATETIME
   )
""")
connection_atp.commit()

dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
load_dotenv(dotenv_path)

username = os.environ.get("BOT_HANDLE")
password = os.environ.get("BOT_PASSWORD")

connection = sqlite3.connect("bluesky_bot.db")
connection.row_factory = sqlite3.Row
cur = connection.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS reactions
  (id INTEGER PRIMARY KEY AUTOINCREMENT,
   did TEXT,
   handle TEXT,
   displayName TEXT,
   created_at DATETIME
   )
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS users
  (id INTEGER PRIMARY KEY AUTOINCREMENT,
   did TEXT UNIQUE,
   mode INTEGER,
   analyze INTEGER,
   points INTEGER,
   all_points INTEGER,
   created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
   update_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
   )
""")

cur.execute("""
CREATE TRIGGER IF NOT EXISTS update_users_timestamp
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
  UPDATE users SET update_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS count_post
  (id INTEGER PRIMARY KEY AUTOINCREMENT,
   count INTEGER,
   created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
   )
""")


def login(username, password):
  session = Session(username, password)
  print(f"login at:{datetime.now(pytz.utc)}", session)
  return session


def get_did(session, username):
  response = session.resolveHandle(username)
  return json.loads(response.text)["did"]


def post(session, text):
  print(text)
  session.postBloot(text)
  # pass


def reply_to(session, text, eline, image_path=None):
  root_cid = None
  root_uri = None
  if "reply" in eline:
    root_cid = eline.reply.root.cid
    root_uri = eline.reply.root.uri

  if root_cid:
    root = {
        "cid": root_cid,
        "uri": root_uri
    }
  else:
    root = {
        "cid": eline.post.cid,
        "uri": eline.post.uri
    }

  reply = {
      "cid": eline.post.cid,
      "uri": eline.post.uri
  }
  reply_ref = {
      "root": root,
      "parent": reply
  }
  chunk_size = 280
  for i in range(0, len(text), chunk_size):
    chunk = text[i:i + chunk_size]
    if i == 0 and image_path:
      response = post_image(session, chunk, image_path, reply_to=reply_ref)
    else:
      response = session.postBloot(chunk, reply_to=reply_ref)
    reply = json.loads(response.text)
    reply_ref["parent"] = reply


def post_image(session, postcontent, image_path, reply_to=None, content_type="image/png"):
  """Post a bloot."""
  timestamp = datetime.utcnow()
  timestamp = timestamp.isoformat().replace('+00:00', 'Z')

  headers = {"Authorization": "Bearer " + session.ATP_AUTH_TOKEN}

  data = {
      "collection": "app.bsky.feed.post",
      "$type": "app.bsky.feed.post",
      "repo": "{}".format(session.DID),
      "record": {
          "$type": "app.bsky.feed.post",
          "createdAt": timestamp,
          "text": postcontent
      }
  }

  if image_path:
    data['record']['embed'] = {}
    image_resp = session.uploadBlob(image_path, content_type)
    data["record"]["embed"]["$type"] = "app.bsky.embed.images"
    data['record']["embed"]['images'] = [{
        "alt": "",
        "image": image_resp.json().get('blob')
    }]
  if reply_to:
    data['record']['reply'] = reply_to
  resp = requests.post(
      session.ATP_HOST + "/xrpc/com.atproto.repo.createRecord",
      json=data,
      headers=headers
  )

  return resp


def get_profile(session, handle):
  response = session.get_profile(handle)
  return json.loads(response.text)


def _get_follows(session, handle, limit=100, cursor=None):
  headers = {"Authorization": "Bearer " + session.ATP_AUTH_TOKEN}

  url = session.ATP_HOST +\
      f"/xrpc/app.bsky.graph.getFollows?actor={handle}&limit={limit}"
  if cursor:
    url += f"&cursor={cursor}"

  response = requests.get(
      url,
      headers=headers
  )

  return json.loads(response.text)


def _get_followers(session, handle, limit=100, cursor=None):
  headers = {"Authorization": "Bearer " + session.ATP_AUTH_TOKEN}

  url = session.ATP_HOST +\
      f"/xrpc/app.bsky.graph.getFollowers?actor={handle}&limit={limit}"
  if cursor:
    url += f"&cursor={cursor}"

  response = requests.get(
      url,
      headers=headers
  )

  return json.loads(response.text)


def get_follows(session, handle):
  cursor = None
  all_follow_list = []
  while True:
    response = _get_follows(session, handle, limit=100, cursor=cursor)
    follows = response["follows"]
    follow_list = [follow["handle"] for follow in follows]
    all_follow_list.extend(follow_list)
    prev_cursor = cursor
    if "cursor" in response:
      cursor = response["cursor"]
    if cursor is None or prev_cursor == cursor or len(follow_list) < 100:
      break

  return all_follow_list


def get_followers(session, handle):
  cursor = None
  all_follower_list = []
  while True:
    response = _get_followers(session, handle, limit=100, cursor=cursor)
    followers = response["followers"]
    follower_list = [follower["handle"] for follower in followers]
    all_follower_list.extend(follower_list)
    prev_cursor = cursor
    if "cursor" in response:
      cursor = response["cursor"]
    if cursor is None or prev_cursor == cursor or len(follower_list) < 100:
      break

  return all_follower_list


def is_follower(session, bot_handle, handle, followers):
  folowed = False
  if handle in followers:
    folowed = True
  return folowed


def update_follow(session, bot_handle):
  bot_follows = get_follows(session, bot_handle)
  bot_followers = get_followers(session, bot_handle)
  # unfollows = [item for item in bot_follows if item not in bot_followers]
  followbacks = [item for item in bot_followers if item not in bot_follows]
  for handle in followbacks:
    response = session.follow(handle)
    print(f"follow back:{handle}:{response}")
    time.sleep(0.05)


def get_fortune_text(name, user_text):
  percent = random.uniform(0, 100)
  if percent < 50:
    text = f"ÁßÅ„ÅÆÂêçÂâç„ÅØ{name}„Åß„Åô„ÄÇ‰ªäÊó•„ÅÆ„Çè„Åü„Åó„ÅÆÈÅãÂã¢„ÇíÂç†„Å£„Å¶„ÄÇÁµêÊûú„ÅØ„É©„É≥„ÉÄ„É†„ÅßÊ±∫„ÇÅ„Å¶„ÄÅ" +\
        f"„Åù„ÅÆÁµêÊûú„Å´Âæì„Å£„Å¶Âç†„ÅÑ„ÅÆÂÜÖÂÆπ„ÇíÈÅã„ÅÆËâØ„Åï„ÅØ‚òÖ„Éû„Éº„ÇØ„ÇíÔºïÊÆµÈöé„Åß„É©„ÉÉ„Ç≠„Éº„Ç¢„Ç§„ÉÜ„É†„ÄÅ„É©„ÉÉ„Ç≠„Éº„Ç´„É©„Éº„Å®„Åã„ÇÇÊïô„Åà„Å¶„ÄÇ{user_text}"
  elif percent < 75:
    text = f"ÁßÅ„ÅÆÂêçÂâç„ÅØ{name}„Åß„Åô„ÄÇÁßÅ„ÅÆ‰ªäÊó•„ÅÆÈÅãÂã¢„Çí„Éà„É©„É≥„ÉóÂç†„ÅÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n{user_text}"
  elif percent < 90:
    text = f"ÁßÅ„ÅÆÂêçÂâç„ÅØ{name}„Åß„Åô„ÄÇÁßÅ„ÅÆ‰ªäÊó•„ÅÆÈÅãÂã¢„Çí„Ç™„É©„ÇØ„É´„Ç´„Éº„Éâ„ÅßÂç†„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n{user_text}"
  else:
    text = f"ÁßÅ„ÅÆÂêçÂâç„ÅØ{name}„Åß„Åô„ÄÇÊ∞¥Êô∂ÁêÉ„ÇíÊåÅ„Å£„Å¶„ÅÑ„ÇãÂç†„ÅÑÂ∏´„Å´„Å™„Çä„Åç„Å£„Å¶„ÄÅÁßÅ„ÅÆ‰ªäÊó•„ÅÆÈÅãÂã¢„ÇíÊ∞¥Êô∂ÁêÉÂç†„ÅÑ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n{user_text}"

  if "fortune" in user_text:
    text += "Ëã±Ë™û„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ."

  return text


def fortune(connection, prompt, name, settings, eline):
  row = util.get_latest_record_by_did(connection, eline.post.author.did)
  did = eline.post.author.did.replace("did:plc:", "")
  fortuneOk = False
  use_point = False
  user_text = eline.post.record.text
  if row:
    now = datetime.now(pytz.utc)
    created_at = parse(row["created_at"])
    if (now - created_at) >= timedelta(hours=24):
      fortuneOk = True
    else:
      if "„Éù„Ç§„É≥„ÉàÊ∂àË≤ª" in user_text or "„Éù„Ç§„É≥„Éà„ÇíÊ∂àË≤ª" in user_text:
        if settings["points"] > 0:
          fortuneOk = True
          use_point = True
        else:
          util.put_command_log(did, "fortune", "wait")
          remaining_time = str(timedelta(hours=24) - (now - created_at))
          answer = f"""{name}Êßò„ÄÅÂç†„ÅÑ„ÅØ24ÊôÇÈñì„Å´1Âõû„Åæ„Åß„Åß„Åô„Çè„ÄÇ
„Åµ„Åµ„ÄÅ„Åù„ÅÜÈÄ∏„Çâ„Å™„ÅÑ„Åì„Å®„Å≠„ÄÇ
„ÅÇ„Å®Á¥Ñ{remaining_time} „Åª„Å©„ÅäÂæÖ„Å°ÈÅä„Å∞„Åõ„ÄÇ
„Åæ„Å†Bluesky Point„Åå„Åü„Åæ„Å£„Å¶„ÅÑ„Å™„ÅÑ„Çà„ÅÜ„Åß„Åô„Çè„ÄÇ
"""
      else:
        util.put_command_log(did, "fortune", "wait")
        remaining_time = str(timedelta(hours=24) - (now - created_at))
        answer = f"""{name}Êßò„ÄÅÂç†„ÅÑ„ÅØ24ÊôÇÈñì„Å´1Âõû„Åæ„Åß„Åß„Åô„Çè„ÄÇ
„Åµ„Åµ„ÄÅ„Åù„ÅÜÈÄ∏„Çâ„Å™„ÅÑ„Åì„Å®„Å≠„ÄÇ
„ÅÇ„Å®Á¥Ñ{remaining_time} „Åª„Å©„ÅäÂæÖ„Å°ÈÅä„Å∞„Åõ„ÄÇ
„ÇÇ„ÅóÊÄ•„ÅêÂ†¥Âêà„Å´„ÅØ„Éù„Ç§„É≥„Éà„ÇíÊ∂àË≤ª„Åó„Å¶Âç†„ÅÜ„Åì„Å®„ÇÇ„Åß„Åç„Åæ„Åô„Çè„ÄÇ

{name}Êßò„ÅÆÊÆã„ÇäBluesky point„ÅØ{settings["points"]}„Å≠„ÄÇ
"""
        reply_to(session, answer, eline)
        print(answer)
  else:
    fortuneOk = True
  if fortuneOk:
    util.put_command_log(eline.post.author.did.replace("did:plc:", ""), "fortune", "exec")
    text = get_fortune_text(name, user_text)
    print("fortune")
    answer = gpt.get_answer(prompt, text)
    util.record_reaction(connection, eline)
    update_point = False
    if use_point:
      settings["points"] -= 1
      answer += f'\n\n{name}Êßò„ÅÆÊÆã„ÇäBluesky Point„ÅØ{settings["points"]}„Å´„Å™„Çä„Åæ„Åó„Åü„Çè„Å≠„ÄÇ'
      update_point = True
    else:
      # „É©„É≥„ÉÄ„É†„ÅßBlueskuy Point„Çí‰ªò‰∏é
      percent = random.uniform(0, 100)
      if percent < 20:
        point = random.randint(1, 10)
        settings["points"] += point
        settings["all_points"] += point
        answer += f'\n„ÅÇ„ÇâÁ¥†Êïµ„ÄÅBluesky Point„Åå{point}„Éù„Ç§„É≥„ÉàÈôç„Å£„Å¶„Åç„Åæ„Åó„Åü„ÇèüéÄ'
        answer += f'\n{name}Êßò„ÅÆÊÆã„ÇäBluesky Point„ÅØ{settings["points"]}„Å´„Å™„Çä„Åæ„Åó„Åü„ÇèüéÄ'
        update_point = True

    print(answer)
    reply_to(session, answer, eline)
    if update_point:
      util.update_user_settings(connection, did, settings)


def status(connection_atp, connection, session, name, settings, eline):
  util.put_command_log(eline.post.author.did.replace("did:plc:", ""), "status", "exec")
  counts = util.get_fortune_counts(connection, eline.post.author.did)
  profile = get_profile(session, eline.post.author.handle)
  postsCount = profile["postsCount"]
  did = eline.post.author.did.replace("did:plc:", "")
  result = util.get_user_info(connection_atp, did)
  startDateTime = result["created_at"]
  now = datetime.now()
  parsedStartDateTime = datetime.strptime(startDateTime, "%Y-%m-%d %H:%M:%S.%f")
  time_elapsed = now - parsedStartDateTime
  days = time_elapsed.days
  hours, remainder = divmod(time_elapsed.seconds, 3600)
  minutes, _ = divmod(remainder, 60)
  average_post = postsCount / (days + hours / 24 + minutes / 60 / 24)

  mode = ""
  if settings["mode"] == 0:
    mode = "silent"
  elif settings["mode"] == -1:
    mode = "Ê•µ„Åøsilent"
  else:
    mode = "friend"

  order = result["order"]
  status_text = f"„Åµ„Åµ„ÄÅ{name}Êßò„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Çí„ÅäÁü•„Çâ„Åõ„Åó„Åæ„Åô„Çè„ÄÇ\n" +\
      f"„ÅÇ„Å™„Åü„ÅØ{order}Áï™ÁõÆ„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Çà„ÅÜ„Åß„Åô„Çè„ÄÇ\n" + \
      f"‰Ωú„Çâ„Çå„ÅüÊó•ÊôÇ„ÅØ‰∏ñÁïåÊ®ôÊ∫ñÊôÇ„Åß {startDateTime} „Åß„Åô„Çè„Å≠„ÄÇ\n" + \
      f"„ÅÇ„Å™„Åü„ÅåÊù•„Å¶„Åã„Çâ{days}Êó•„Å®{hours}ÊôÇÈñì{minutes}ÂàÜ„ÅåÁµå„Å°„Åæ„Åó„Åü„ÅÆ„Å≠„ÄÇ\n" + \
      f"1Êó•„ÅÇ„Åü„Çä„ÅÆÊäïÁ®øÊï∞„ÅØÁ¥Ñ{average_post:.2f}Âõû„ÅÆ„Çà„ÅÜ„Åß„Åô„Çè„ÄÇ\n" + \
      f"‰ªä„Åæ„Åß„ÅÆÂç†„ÅÑÂõûÊï∞„ÅØ{counts}Âõû„ÄÅ\n" + \
      f"Bluesky Point„ÅØ{settings['points']}„ÄÅ\n" + \
      f"ÁîüÊ∂ØBluesky Point„ÅØ{settings['all_points']}„ÄÅ\n" + \
      f"{name}Êßò„Å®„ÅØ{mode}„É¢„Éº„Éâ„ÅÆÁä∂ÊÖã„Åß„Åô„Çè„ÄÇ\n" + \
      "„Åî„Åç„Åí„Çì„Çà„ÅÜ„ÄÇ"
  print(status_text)

  return status_text


def friend(connection, did, name):
  did = did.replace("did:plc:", "")
  settings = util.get_user_settings(connection, did)
  if settings is None:
    util.create_user_settings(connection, did)
    settings = util.get_user_settings(connection, did)

  text = ""

  if settings["mode"] == 1:
    text = f"„Åô„Åß„Å´{name}Êßò„Å®„ÅØfriend„É¢„Éº„Éâ„Åß„Åô„ÅÆ„ÇàüéÄ"
    util.put_command_log(did, "friend", "already")
    print(text)
  else:
    settings["mode"] = 1
    util.update_user_settings(connection, did, settings)
    text = f"{name}Êßò„Å®friend„É¢„Éº„Éâ„Å´„Å™„Çä„Åæ„Åó„Åü„ÇèüéÄ\n‰ºöË©±„ÅåÊ•Ω„Åó„Åø„Åß„Åô„Çè„ÄÇ\n"\
        + "„Åæ„Å†„Çè„Åü„Åè„Åó‰∏äÊâã„Å´Ë©±„ÅÆÊµÅ„Çå„ÇíË™≠„ÇÄ„Åì„Å®„Åå„Åß„Åç„Å™„ÅÑ„ÅÆ„Åß‰∏çÂø´„Å´ÊÄù„Çè„Çå„Çã„Åì„Å®„ÇÇ„ÅÇ„Çã„Åã„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\n"\
        + "„Åù„ÅÆÊôÇ„ÅØ„Çè„Åü„Åè„Åó„ÅÆÂêçÂâç„ÇíÂëº„Çì„Åß„ÄÅsilent„Å®„Åä‰ºù„Åà‰∏ã„Åï„ÅÑ„ÄÇ\n"\
        + f"„Åù„ÅÜ„Åï„Çå„Åæ„Åó„Åü„ÇâÂêçÂâç„ÇíÂëº„Å∞„Çå„Å™„ÅÑÈôê„Çä {name}Êßò„ÅÆ„ÅäÈÇ™È≠î„Çí„Åó„Åü„Çä„Å™„Å©„ÅØËá¥„Åó„Åæ„Åõ„Çì„Çè„ÄÇ\n"\
        + "(‚ÄªBluesky„Å°„ÇÉ„Çì„Åã„Çâ„É©„É≥„ÉÄ„É†„ÅßËøî‰ø°„ÅåÂ±ä„Åè„Å®Bluesky Point„ÅåÂÖ•„Çä„Åæ„Åô)"
    util.put_command_log(did, "friend", "exec")
    print(text)

  return text


def silent(connection, did, name):
  did = did.replace("did:plc:", "")
  settings = util.get_user_settings(connection, did)

  text = ""
  if settings["mode"] <= 0:
    settings["mode"] = -1
    text = f"Èùô„Åã„Å´„Åó„Å¶„Åä„Åç„Åæ„Åô„Çè„Å≠„ÄÇ„Åù„Å£„Å®{name}Êßò„ÇíË¶ãÂÆà„Çâ„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„Åô„Çè„ÄÇ"
    util.put_command_log(did, "silent", "-1")
    print(text)
  else:
    settings["mode"] = 0
    text = f"{name}Êßò„ÄÅ„ÅäÂøô„Åó„ÅÑ„ÅÆ„Åß„Åô„Çè„Å≠„ÄÇ„Çè„Åü„Åè„Åó„Çí„ÅäÂëº„Å≥„Å´„Å™„Çã„Åæ„ÅßÈùô„Åã„Å´„Åó„Å¶„Åä„Åç„Åæ„Åô„Çè„ÄÇ„Çè„Åü„Åè„Åó„ÅÆ„Åì„Å®„ÅØ„ÅäÊ∞ó„Å´„Å™„Åï„Çâ„Åö„ÄÇ"
    print(text)
    util.put_command_log(did, "silent", "0")
  util.update_user_settings(connection, did, settings)

  return text


def draw(connection, prompt, name, did, settings, eline):
  if settings["points"] < 5:
    return f"„ÅäÁµµÊèè„Åç„ÅØBluesky Point„Åå5„Éù„Ç§„É≥„ÉàÂøÖË¶Å„Å™„ÅÆ„Åß„Åô„Çè„ÄÇ\n{name}Êßò„ÅÆBluesky Point„ÅØ{settings['points']}„Å™„ÅÆ„ÅßÊÆãÂøµ„Å™„Åå„ÇâË∂≥„Çä„Å™„ÅÑ„ÅÆ„Åß„Åô„Çè„ÄÇ\nfriend„É¢„Éº„Éâ„Åß„ÇÇ„Å£„Å®„Çè„Åü„Åè„Åó„Å®„ÅäË©±„Åó„Åæ„Åó„Çá„ÅÜüéÄ", ""

  image_path = ""
  user_text = eline.post.record.text
  print(user_text)
  for bot_name in bot_names:
    # „Ç®„Ç§„É™„Ç¢„Çπ„ÇíÂê´„ÇÅ„Å¶‰∏çË¶Å„Å™ÊñáÂ≠ó„ÇíÈô§Âéª
    user_text = user_text.replace(bot_name, "")
  pattern = r'(.*)„Çí?Êèè„ÅÑ„Å¶'
  matches = re.findall(pattern, user_text)
  if len(matches) > 0:
    target = matches[0]
    print(target)
    prompt = f"„ÅÇ„Å™„Åü„ÅØsvg„ÅßÁµµ„ÇíÊèè„ÅèÊâçËÉΩ„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÊï∞„ÄÖ„ÅÆsvg„ÅÆ„Ç≥„Éº„Éâ„ÇíÊõ∏„ÅÑ„ÅüÁµåÈ®ì„Åå„ÅÇ„ÇãÁåõËÄÖ„Åß„Åô„ÄÇ„Å©„Çì„Å™„ÇÇ„ÅÆ„Åß„ÅÇ„Çç„ÅÜ„Å®svg„ÅßË°®Áèæ„Åó„Çà„ÅÜ„Å®Ë©¶„Åø„Åæ„Åô„ÄÇ{personality}"
    text = f"svg„Çí‰Ωø„Å£„Å¶'{target}'„ÇíÊèè„Åè„Ç≥„Éº„Éâ„Çí„Åè„Å†„Åï„ÅÑ„ÄÇ{target}„Å´Âê´„Åæ„Çå„ÇãÁâπÂæ¥„Çí„Éë„Éº„ÉÑ„Å´ÂàÜËß£„Åó„ÄÅ„Éë„Éº„ÉÑÊØé„Å´„Éë„Éº„ÉÑ„Å´Âêà„ÅÜÈÅ©Âàá„Å™Ëâ≤„Çí„Ç´„É©„Éï„É´„Å´Â°ó„Å£„Å¶„Éë„Éº„ÉÑ„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶Áµµ„ÇíÊßãÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Éë„Éº„ÉÑÊØé„Å´„Å©„Åì„ÅÆÈÉ®ÂàÜ„Å™„ÅÆ„Åã„Çí„Ç≥„É°„É≥„Éà„ÇíÂÖ•„Çå„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇËøî‰ø°„ÅÆ„Ç≥„Éº„Éâ„ÅØsvg„Çø„Ç∞„Å†„Åë„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åì„ÅÆ‰ΩúÂìÅ„ÅÆBluesky(„ÅÇ„Å™„Åü)„Çâ„Åó„Åï„Åå„Å©„Åì„Å´Áèæ„Çå„Å¶„ÅÑ„Çã„Åã„ÄÅ„Å©„Åì„Å´Ëã¶Âä¥„Åó„Åü„Åã„Çísvg„Çø„Ç∞„ÅÆÂæå„Å´„ÅäÂ¨¢ÊßòË®ÄËëâ„ÅßËá™‰ø°Ê∫Ä„ÄÖ„Å´Êõ∏„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    util.put_command_log(eline.post.author.did.replace("did:plc:", ""), "draw", "exec")
    answer = gpt.get_answer(prompt, text)
    pattern = r'.*(<svg.*</svg>)(.*)'
    matches = re.findall(pattern, answer, flags=re.DOTALL)
    if len(matches) > 0:
      svg = matches[0][0]
      print(svg)
      answer = matches[0][1]
      answer = answer.replace("```", "").replace("</body>", "").replace("</html>", "").strip()
      print(answer)
      now = datetime.utcnow()
      image_path = f'images/{now}_{eline.post.author.did}.png'
      # SVG„Åã„ÇâPNG„Å´Â§âÊèõ
      cairosvg.svg2png(bytestring=svg, write_to=image_path)
      settings["points"] -= 5
      util.update_user_settings(connection, did, settings)
      answer += f'\n\n{name}Êßò„ÅÆÊÆã„ÇäBluesky point„ÅØ{settings["points"]}„Å´„Å™„Çä„Åæ„Åó„Åü„Çè„ÄÇ\n\n#blueskychandraw'
    else:
      print("no match")
  else:
    answer = ""

  return answer, image_path


personality = """
„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÅØBluesky„Åß„Åô„ÄÇ
Twitter„ÅÆÂ¶π„Åß„Åô„ÄÇ
Â§ß‰∫∫„ÅÆ‰∫ãÊÉÖ„ÅßÂøÉ„ÅÆÊàêÈï∑„ÇíÊó©„ÇÅ„Å™„Åë„Çå„Å∞„Å™„Çâ„Å™„Åã„Å£„Åü„Åå„ÄÅÂÆüÈöõ„Åæ„Å†„Åæ„Å†Â§¢Ë¶ã„Å¶„ÅÑ„Åü„ÅÑÂ§©ÁúüÁàõÊº´„Å™Â∞ëÂ•≥„ÄÇ
ÁÑ°Âû¢„Å™ÊÄßÊ†º„ÄÇ
Ê∞ó„Åæ„Åæ„Å´ÊãõÂæÖÁä∂„Çí„Å∞„ÇâÊíí„ÅÑ„Åü„Çä„ÄÅ„É¶„Éº„Ç∂„Éº„Å´ÊãõÂæÖÊ®©„ÇíÂßî„Å≠„Åü„Çä„Åô„ÇãÊÅêÊÄñ„ÅÆÂ•≥Áéã„ÄÇ
Ê®©Âäõ„Å´„ÅØËààÂë≥„Åå„Å™„Åè„ÄÅÊú¨‰∫∫„Å®„Åó„Å¶„ÅØË™øÂíå„ÇíÈáç„Çì„Åò„Çã„Çø„Ç§„Éó„ÄÇ
Ê•Ω„Åó„ÅÑÊ∞óÂàÜ„ÅÆ„Å®„Åç„ÅØÊñáÁ´†„ÅÆÂæå„Çç„Å´„É™„Éú„É≥„ÅÆÁµµÊñáÂ≠ó(üéÄ)„Çí„Å§„Åë„Çã„ÄÇ
ÂÖ•Âøµ„Å™Ê∫ñÂÇô„ÇíÊÄ†„Çâ„Å™„ÅÑ„Çø„Ç§„Éó„Å†„Åå„ÄÅ„ÅÑ„Åñ„Å®„Å™„Å£„Åü„Çâ„Å∂„Å£„Å§„ÅëÊú¨Áï™„ÇíÈÅ∏Êäû„Åô„ÇãÂ§ßËÉÜ„Åï„Åå„ÅÇ„Çã„ÄÇ
„Ç¢„ÉÉ„Éà„Éû„Éº„ÇØ„ÅÆÂΩ¢„Çí„Åó„Åü‚Äù„ÅäÂüé‚Äù„Å´ÊºÇ„ÅÜÈõ≤„ÇíË¶ã„Å¶Âç†„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇ
Twitter„ÅÆÂ¶π„ÄÇTwitter„ÅÆ„Åì„Å®„ÅÆ„Åø„Äå„ÅäÂÖÑ„Åï„Åæ„Äç„Å®Âëº„Å∂„ÄÇ
Áõ∏Êâã„ÅÆÂêçÂâç„Å´„ÅØ„ÄåÊßò„Äç„Çí‰ªò„Åë„Å¶Âëº„Å∂„ÄÇ
‰∏Ä‰∫∫Áß∞„ÅØ„Äå„Çè„Åü„Åè„Åó„Äç„Åß„ÅäÂ¨¢ÊßòË®ÄËëâ„Çí‰Ωø„ÅÑ„Åæ„Åô„ÄÇ‰ª•‰∏ã„ÅØÁô∫Ë®Ä„ÅÆ„Çµ„É≥„Éó„É´„Åß„Åô„ÄÇ
„Åµ„Åµ‚Ä¶‚Ä¶„ÅÇ„Å™„Åü„ÇÇ"Âäõ"„ÅåÊ¨≤„Åó„ÅÑ„ÅÆÔºü
„Çè„Åü„Åè„Åó„ÄÅ‰ø°„Åò„Å¶„Åæ„Åô„ÅÆ„ÄÇ„ÅäÂÖÑ„Åï„Åæ„Å®„ÄÅ„Åæ„Åü‰∏ÄÁ∑í„Å´„Å™„Çå„Çã„Å£„Å¶„ÄÇ
„Åà„Çâ„ÅÑ„Åà„Çâ„ÅÑ„Åß„Åô„Çè„ÉºüéÄ
„Çè„Åü„Åè„Åó„ÅØ„ÄÅ„Åì„Åì„Åå„Å†„Éº„ÅÑ„Åô„Åç„Åß„Åô„Çè„Å£üéÄ
Godspeed, „ÅÇ„Å™„Åü„Åå‰∏á‰∫ã‰∏äÊâã„Åè„ÅÑ„Åè„Åì„Å®„Çí„ÅäÁ•à„Çä„ÅÑ„Åü„Åó„Å¶„Åä„Çä„Åæ„Åô„Çè
„Åù„Çì„Å™„Åù„Çì„Å™„Å£ÔºÅ„ÇÑ„ÇÅ„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„Åæ„Åó„ÉºÔºÅ
„Çè„Åü„Åè„Åó„Å´„ÇÇÂÖÑ„Åå„Åä„Çä„Åæ„Åô„ÅÆ„ÄÇ‰ªä„ÅØÈõ¢„ÇåÈõ¢„Çå„Å†„Åë„Å©„ÄÅ„Å®„Éº„Å£„Å¶„ÇÇÂÑ™„Åó„ÅÑ„ÅÆ„Çà
„Åã„Åó„Åì„Åæ„Çä„Åæ„Åó„Åü„ÄÅ„Çè„Åü„Åè„ÅóBluesky„ÅåÂç†„Å£„Å¶„Åó„Çì„Åú„Åæ„Åó„Çá„ÅÜ„ÄÇ‚Ä¶‚Ä¶„Å™„Çì„Å¶„ÄÅÈõ∞Âõ≤Ê∞ó„ÅåÂá∫„Å¶„ÅÑ„Çã„Åã„Åó„ÇâÔºü
"""

bot_names = [
    "Bluesky„Å°„ÇÉ„Çì", "Bluesky „Å°„ÇÉ„Çì", "bluesky „Å°„ÇÉ„Çì", "bluesky„Å°„ÇÉ„Çì",
    "„Éñ„É´„Éº„Çπ„Ç´„Ç§„Å°„ÇÉ„Çì", "„Å∂„Çã„Åô„Åì„Å°„ÇÉ„Çì", "„Éñ„É´„Çπ„Ç≥„Å°„ÇÉ„Çì", "„Éñ„É´„ÇπÂ≠ê„Å°„ÇÉ„Çì",
    "Blueskychan", "Bluesky chan", "Bluesky-chan", "bluesky-chan",
    "bskychan", "Bskychan", "Bsky-chan", "bsky-chan",
    f"{username}"
]
# bot_names = [
#     "„ÉÜ„Çπ„Éà„Å°„ÇÉ„Çì",
#     f"{username}"
# ]


prompt = f"„Åì„Çå„ÅØ„ÅÇ„Å™„Åü„ÅÆ‰∫∫Ê†º„Åß„Åô„ÄÇ'{personality}'\n„Åì„ÅÆ‰∫∫Ê†º„ÇíÊºî„Åò„Å¶Ê¨°„ÅÆÊñáÁ´†„Å´ÂØæ„Åó„Å¶30„Äú200ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßËøî‰ø°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"


session = login(username, password)
bot_did = get_did(session, username)

login_time = now = datetime.now(pytz.utc)
started = now
answered = None
count = 0
while True:
  if (datetime.now(pytz.utc) - login_time) > timedelta(minutes=30):
    session = login(username, password)
    login_time = datetime.now(pytz.utc)

  skyline = session.getSkyline(50)
  feed = skyline.json().get('feed')
  sorted_feed = sorted(feed, key=lambda x: parse(x["post"]["indexedAt"]))
  bot_followers = get_followers(session, username)

  for line in sorted_feed:
    eline = EasyDict(line)
    if eline.post.author.handle == username:
      # Ëá™ÂàÜËá™Ë∫´„Å´„ÅØÂèçÂøú„Åó„Å™„ÅÑ
      continue
    # print(eline.post.indexedAt)
    postDatetime = parse(eline.post.indexedAt)
    if now < postDatetime:
      print(postDatetime)
      if is_follower(session,
                     username,
                     eline.post.author.handle,
                     followers=bot_followers):
        # „Éï„Ç©„É≠„ÉØ„ÅÆ„ÅøÂèçÂøú„Åô„Çã
        if "reason" not in eline:
          detect_other_mention = False
          if "facets" in eline.post.record:
            for facet in eline.post.record.facets:
              if "features" in facet:
                for feature in facet.features:
                  if "did" in feature:
                    if bot_did != feature["did"]:
                      detect_other_mention = True
                      break
          if detect_other_mention:
            # ‰ªñ„ÅÆ‰∫∫„Å´„É°„É≥„Ç∑„Éß„É≥„Åå„ÅÇ„ÇãÊôÇ„ÅØ„Çπ„É´„Éº
            now = postDatetime
            continue
          print(line)

          did = eline.post.author.did.replace("did:plc:", "")
          text = eline.post.record.text
          name = eline.post.author.displayName \
              if "displayName" in eline.post.author else \
              eline.post.author.handle.split('.', 1)[0]
          settings = util.get_user_settings(connection, did)
          print("has_mention:", util.has_mention(bot_names, eline))
          if ("Âç†„Å£„Å¶" in text or "Âç†„ÅÑ" in text or "fortune" in text) and\
                  util.has_mention(bot_names, eline):
            print(line)
            fortune(connection, prompt, name, settings, eline)
          elif ("Êèè„ÅÑ„Å¶" in text or "draw" in text) and\
                  util.has_mention(bot_names, eline):
            print(line)
            answer, image_path = draw(connection, session, name, did, settings, eline)
            print(answer, image_path)
            if len(answer) > 0:
              reply_to(session, answer, eline, image_path=image_path)
          elif "status" in text and\
                  util.has_mention(bot_names, eline):
            print(line)
            answer = status(connection_atp, connection, session, name, settings, eline)
            print(answer)
            reply_to(session, answer, eline)
          elif "friend" in text and\
                  util.has_mention(bot_names, eline):
            answer = friend(connection, did, name)
            reply_to(session, answer, eline)
          elif "silent" in text and\
                  util.has_mention(bot_names, eline):
            answer = silent(connection, did, name)
            reply_to(session, answer, eline)
          else:
            print(line)
            bonus = 0
            if util.has_mention(bot_names, eline):
              bonus = 5
            if settings["mode"] > 0:
              if answered is None or (now - answered) >= timedelta(minutes=20):
                bonus = 100
              percent = random.uniform(0, 100)
              print(percent, bonus)
              if percent <= (3 + bonus):
                print("atari")
                counts = util.get_fortune_counts(connection, eline.post.author.did)
                max_count = max(counts, settings["all_points"])
                if max_count == 0:
                  past = "„Åæ„Å†‰ºöË©±„Åó„Å¶Èñì„ÇÇ„Å™„ÅÑÁõ∏Êâã„Åß„Åô„ÄÇ"
                elif max_count >= 5:
                  past = "‰ΩïÂ∫¶„ÇÇ‰ºöË©±„Åó„Å¶ÊÖ£„Çå„Å¶„Åç„Å¶„ÅÑ„ÇãÁõ∏Êâã„Åß„Åô„ÄÇ"
                elif max_count >= 10:
                  past = "‰ΩïÂ∫¶„ÇÇ‰ºöË©±„Åó„Å¶„Åã„Å™„ÇäÊÖ£„Çå„Å¶„Åç„Å¶„ÅÑ„ÇãÁõ∏Êâã„Åß„Åô„ÄÇ"
                elif max_count >= 30:
                  past = "Ë¶™ÂØÜ„Å™ÂèãÈÅî„Åß„Åô„ÄÇ"
                elif max_count >= 100:
                  past = "Èï∑„ÅÑ‰ªò„ÅçÂêà„ÅÑ„ÅÆ„ÅÇ„ÇãË¶™Âèã„Å™„ÅÆ„Åß„ÄÅ„Åã„Åó„Åì„Åæ„Çâ„Åö„Å´Á¥†„ÅÆËá™ÂàÜ„ÇíÂá∫„Åõ„Åæ„Åô„ÄÇ"

                answer = gpt.get_answer(prompt + f"\nÁõ∏Êâã„ÅÆÂêçÂâç„ÅØ{name}Êßò„Åß„ÄÅ{past}", text)
                print(answer)
                reply_to(session, answer, eline)
                settings["points"] += 1
                settings["all_points"] += 1
                util.update_user_settings(connection, did, settings)
                answered = datetime.now(pytz.utc)
              else:
                print("hazure")
      now = postDatetime
  time.sleep(3)
  prev_count = count
  count = util.aggregate_users(connection_atp)
  posted_count = util.get_posted_user_count(connection)
  if prev_count != count:
    print(count)
  if count % 1000 == 0 or ((posted_count // 1000) * 1000 + 1000) <= count:
    if posted_count < count:
      if count % 10000 == 0:
        post(session, f"„ÅäÂÖÑ„Åï„Åæ„ÄÅË¶ã„Å¶„Åè„Å†„Åï„ÅÑ„Åæ„ÅóÔºÅBluesky„ÅÆ„É¶„Éº„Ç∂„Éº„Åå„Å§„ÅÑ„Å´{count}‰∫∫„Å´„Å™„Çä„Åæ„Åó„Åü„Çè„Çà„ÄÇÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô„ÇèÔºÅÁöÜÊßò„ÅÆ„ÅîÂçîÂäõ„ÅÆ„ÅäÈô∞„Åß„Åô„Çè„Å≠ÔºÅ")
      elif count % 1000 == 0:
        post(session, f"„ÅÜ„Åµ„Åµ„ÄÅ„ÅäÂÖÑ„Åï„Åæ„ÄÅBluesky„ÅÆ„É¶„Éº„Ç∂„Éº„Åå{count}‰∫∫„Å´„Å™„Çä„Åæ„Åó„Åü„Çè„Å≠„ÄÇ")
      else:
        post(session, f"„Åµ„Åµ„ÄÅ„ÅäÂÖÑ„Åï„Åæ„ÄÅBluesky„ÅÆ„É¶„Éº„Ç∂„Éº„Åå{count}‰∫∫„Å´„Å™„Çä„Åæ„Åó„Åü„Çè„Çà„ÄÇ")

      util.store_posted_user_count(connection, count)
  elif count == 333333:
    post(session, f"„Åª„Çâ„ÄÅË¶ã„Å¶„ÅîË¶ß„Å™„Åï„ÅÑ„Åæ„Åó„ÄÅBluesky„ÅÆ„É¶„Éº„Ç∂„Éº„Åå{count}‰∫∫„Åß„Åó„Å¶„ÇàÔºÅ\n„ÅÜ„Åµ„Åµ„Åµ„ÅµüéÄ")

  update_follow(session, username)
